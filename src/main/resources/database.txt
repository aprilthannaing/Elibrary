CREATE TABLE `category` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `myanmarName` varchar(100) DEFAULT NULL,
 `engName` varchar(100) DEFAULT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
PRIMARY KEY (`id`)
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

CREATE TABLE `subcategory` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `name` varchar(100) DEFAULT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
PRIMARY KEY (`id`)
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

CREATE TABLE category_subcategory(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
categoryId bigint(20) NOT NULL,
subcategoryId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (categoryId) REFERENCES category (id),
CONSTRAINT FOREIGN KEY (subcategoryId) REFERENCES subcategory (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `author` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `name` varchar(50) DEFAULT NULL,
 `profilePicture` varchar(255) DEFAULT NULL,
 `sort` varchar(50) DEFAULT NULL,
 `authorType` varchar(50) DEFAULT NULL, 
 `entityStatus` varchar(100) DEFAULT NULL,
PRIMARY KEY (`id`))ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
//updated
CREATE TABLE `hluttaw` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `boId` varchar(255) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

CREATE TABLE `department` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `boId` varchar(255) NOT NULL,
  `hluttawboId` bigint NOT NULL,
  `code` varchar(20) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_s9y70mfjwiqoafj94228` (`hluttawboId`),
  CONSTRAINT `FK_s9y70mfjwiqoafj94228` FOREIGN KEY (`hluttawboId`) REFERENCES `hluttaw` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

CREATE TABLE `position` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `boId` varchar(255) NOT NULL,
  `code` varchar(20) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

CREATE TABLE `user` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `boId` varchar(255) NOT NULL,
  `hluttawboId` bigint NOT NULL,
  `departmentboId` bigint NOT NULL,
  `positionboId` bigint NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `phoneNo` varchar(100) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `role` varchar(100) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `expiredDate` varchar(100) DEFAULT NULL,
  `createdDate` varchar(255) DEFAULT NULL,
  `modifiedDate` varchar(255) DEFAULT NULL,
  `entityStatus` varchar(100) DEFAULT NULL,
  `sessionStatus` varchar(100) DEFAULT NULL,
  `fromUserId` varchar(255) DEFAULT NULL,
  `verificationCode` varchar(6) DEFAULT NULL,//atn
  PRIMARY KEY (`id`),
  KEY `FK_s9ffjsajfkhsj89797` (`hluttawboId`),
  KEY `FK_s9fffjwbesflkjso987` (`departmentboId`),
  KEY `FK_sfjfhwfwshiowse8975430` (`positionboId`),
  CONSTRAINT `FK_s9fffjwbesflkjso987` FOREIGN KEY (`departmentboId`) REFERENCES `department` (`id`),
  CONSTRAINT `FK_s9ffjsajfkhsj89797` FOREIGN KEY (`hluttawboId`) REFERENCES `hluttaw` (`id`),
  CONSTRAINT `FK_sfjfhwfwshiowse8975430` FOREIGN KEY (`positionboId`) REFERENCES `position` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

CREATE TABLE `session` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `boId` varchar(255) NOT NULL,
  `userId` bigint NOT NULL,
  `startDate` varchar(50) NOT NULL,
  `endDate` varchar(50) NOT NULL,
  `entityStatus` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `123` (`userId`),
  CONSTRAINT `123` FOREIGN KEY (`userId`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
//updated end

CREATE TABLE `history` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
  userId bigint(20) NOT NULL,
  bookId bigint(20)NOT NULL,
 `actionStatus` varchar(100) DEFAULT NULL,   
 `dateTime`varchar(255) DEFAULT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (userId) REFERENCES user (id),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `feedback` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `userId` bigint(20) NOT NULL,
 `replyId` bigint(20) DEFAULT NULL, 
 `message` varchar(500) NOT NULL,  
 `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
 CONSTRAINT FOREIGN KEY (replyId) REFERENCES reply (id),
CONSTRAINT FOREIGN KEY (userId) REFERENCES user (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `reply` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `message` varchar(500) NOT NULL,  
 `dateTime` varchar(50) DEFAULT NULL, 
 `entityStatus` varchar(100) DEFAULT NULL, 
  PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE category_subcategory(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
categoryId bigint(20) NOT NULL,
subcategoryId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (categoryId) REFERENCES category (id),
CONSTRAINT FOREIGN KEY (subcategoryId) REFERENCES subcategory (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `publisher` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `name` varchar(255) DEFAULT NULL,
 `sort` varchar(255) DEFAULT NULL, 
 `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;



CREATE TABLE `rating` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `rating` bigint(20) DEFAULT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


CREATE TABLE `comment` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `description` longText DEFAULT NOT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


CREATE TABLE `book` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL, 
 `ISBN` varchar(150) DEFAULT NULL,
 `edition` int(50) DEFAULT NULL,
 `publishedYear` varchar(20) DEFAULT NULL,
 `title` varchar(100) DEFAULT NULL,
 `coverPhoto` varchar(255) DEFAULT NULL,
 `publishedDate` varchar(50) DEFAULT NULL,
 `volume` int(50) DEFAULT NULL,
 `state` varchar(50) DEFAULT NULL,
 `modifiedDate` varchar(50) DEFAULT NULL,
 `createdDate` varchar(50) DEFAULT NULL,
 `sort` varchar(50) DEFAULT NULL,
 `path` varchar(255) DEFAULT NULL,
 `seriesIndex` varchar(50) DEFAULT NULL,
 `size` varchar(50) DEFAULT NULL, 
 `callNo` varchar(50) DEFAULT NULL, 
 `accessionNo` varchar(50) DEFAULT NULL, 
 `downloadApproval` varchar(50) DEFAULT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE book_author(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
bookId bigint(20) NOT NULL,
authorId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id),
CONSTRAINT FOREIGN KEY (authorId) REFERENCES author (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE book_category(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
bookId bigint(20) NOT NULL,
categoryId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id),
CONSTRAINT FOREIGN KEY (categoryId) REFERENCES category (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE book_subcategory(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
bookId bigint(20) NOT NULL,
subcategoryId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id),
CONSTRAINT FOREIGN KEY (subcategoryId) REFERENCES subcategory (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE book_publisher(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
bookId bigint(20) NOT NULL,
publisherId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id),
CONSTRAINT FOREIGN KEY (publisherId) REFERENCES publisher (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE book_comment(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
bookId bigint(20) NOT NULL,
commentId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id),
CONSTRAINT FOREIGN KEY (commentId) REFERENCES comment (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE book_rating(
`id` bigint(20) NOT NULL AUTO_INCREMENT,
bookId bigint(20) NOT NULL,
ratingId bigint(20)NOT NULL,
PRIMARY KEY (`id`),
CONSTRAINT FOREIGN KEY (bookId) REFERENCES book (id),
CONSTRAINT FOREIGN KEY (ratingId) REFERENCES rating (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

alter table book modify column edition varchar(50);
alter table book modify column volume varchar(50);
alter table book add column uploader varchar(50);
alter table category add column priority double;
alter table subcategory add column priority double;
update category set priority=0;
update subcategory set priority=0;
alter table user add column fromUserId varchar(50);
alter table category add column icon varchar(255);
alter table subcategory add column display varchar(255);

alter table book drop column readStatus;
alter table book drop column favouriteStatus;
alter table book drop column bookMarkStatus;
alter table book add column ownRating varchar(255);
alter table book add column averageRating varchar(255);
alter table user add column verificationCode varchar(6);
alter table history add column ratingId varchar(50);

alter table category_subcategory rename column subcategoryId to subCategoryId;

ALTER TABLE category_subcategory RENAME COLUMN subcategoryId TO subCategoryId;

ALTER TABLE category_subcategory CHANGE COLUMN subcategoryId subCategoryId varchar(50);

update book set ownRating=0;
update book set averageRating=0;
update book set favouriteStatus="false";
update book set bookMarkStatus="false";

update author set profilePicture="AuthorProfile/author1.png";

ALTER TABLE subcategory CHANGE name myanmarName VARCHAR(255) DEFAULT NULL;
ALTER TABLE subcategory ADD engName VARCHAR(150) DEFAULT NULL;


ALTER table Book ADD column searchTerms varchar(1000);
UPDATE Book book SET searchTerms = CONCAT_WS ( " ", boId, ISBN, publisher, edition, title, publishedDate, volume, createdDate, callNo, 
accessionNo,(select user.name from User user where user.id = book.uploader));

ALTER table Book ADD column searchTerms varchar(1000);
UPDATE Book book SET searchTerms = CONCAT_WS ( " ", boId, ISBN, publisher, edition, title, publishedDate, volume, createdDate, callNo, 
accessionNo,(select user.name from User user where user.id = book.uploader));

update subcategory set display="true" where id=7;
update category set icon="CategoryIcon/englishbook.png" where id=4;
update category set icon="CategoryIcon/infonote.png" where id=6;
update category set icon="CategoryIcon/ministrybook.png" where id=2;
update category set icon="CategoryIcon/myanmarbook.png" where id=1;
update category set icon="CategoryIcon/organization.png" where id=3;
update category set icon="CategoryIcon/periodicalbook.png" where id=5;


//Stored procedure
------------------
USE elibrary;
DELIMITER //
DROP PROCEDURE IF EXISTS GET_BookCountByAuthor;
CREATE PROCEDURE GET_BookCountByAuthor()
BEGIN
 SELECT
    BC.categoryId AS 'CAT_ID',
    A.id AS 'AUTHOR_ID',
    A.name AS 'AUTHOR_NAME',
    COUNT(BA.bookId) AS 'TOT_COUNT'
  FROM book_author ba
    INNER JOIN author a
      ON A.id = BA.authorId
    INNER JOIN book_category bc
      ON BA.bookId = BC.bookId
  GROUP BY BC.categoryId,
           A.id,
           A.name,
           A.entityStatus
  ORDER BY TOT_COUNT DESC;
END
//
DELIMITER ;

call GET_BookCountByAuthor()

DELIMITER //
DROP PROCEDURE IF EXISTS GetBookCountByActionStatus;
CREATE PROCEDURE GetBookCountByActionStatus()
BEGIN
 SELECT 
  H.bookId 'BOOK'
,  SUM(CASE WHEN H.actionStatus="READ" THEN 1  -- END) AS 'TOT_COUNT' 
  WHEN H.actionStatus="FAVOURITE" THEN 1  WHEN H.actionStatus="BOOKMARK" THEN 1  END) AS 'TOT_COUNT'
,  H.actionStatus 
  FROM history H
  GROUP BY H.bookId
 ,H.actionStatus
  ORDER BY TOT_COUNT DESC;
END
//DELIMITER ;

call GetBookCountByActionStatus()







DELIMITER //
DROP PROCEDURE IF EXISTS GET_BookId_BySubCat;
CREATE PROCEDURE GET_BookId_BySubCat(IN ST nvarchar(1000), SubcatID varchar(30))
BEGIN
 SELECT b.id
  , b.boId
  FROM book b
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category bc ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
WHERE CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN 
  ,b.edition, b.volume,  b.callNo,  b.accessionNo,b.uploader
  , (SELECT a.name FROM author a WHERE a.id=ba.authorId) , (SELECT p.name FROM publisher p  WHERE p.id=bp.publisherId)
  , (SELECT S.myanmarName FROM subcategory s WHERE S.id=BS.subcategoryId), (SELECT S.engName FROM subcategory s WHERE S.id=BS.subcategoryId),(SELECT C.myanmarName FROM category c WHERE C.id=BC.categoryId)
  ) LIKE CONCAT('%',ST,'%')
AND bs.subcategoryId=SubcatID;
END
//DELIMITER ;

call elibrary.GET_BookId_ByCat('နှစ်(၂၀)ပြည့်','2');



USE elibrary;
DELIMITER //
DROP PROCEDURE IF EXISTS GET_BookId_ByCat;
CREATE PROCEDURE GET_BookId_ByCat(IN ST nvarchar(1000), CatID varchar(30))
BEGIN
 SELECT b.id
  , b.boId
  FROM book b
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category bc ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
WHERE CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN 
  ,b.edition, b.volume,  b.callNo,  b.accessionNo,b.uploader
  , (SELECT a.name FROM author a WHERE a.id=ba.authorId) , (SELECT p.name FROM publisher p  WHERE p.id=bp.publisherId)
  , (SELECT S.myanmarName FROM subcategory s WHERE S.id=BS.subcategoryId),(SELECT C.myanmarName FROM category c WHERE C.id=BC.categoryId)
  ) LIKE CONCAT('%',ST,'%')
  AND bc.categoryId=CatID;
END
//DELIMITER ;

call GET_BookId_ByCat('နှစ်(၂၀)ပြည့်','2')

DELIMITER //
DROP PROCEDURE IF EXISTS GET_BookId_ByCat;
CREATE PROCEDURE `GET_BookId_ByAuthor`(IN ST NVARCHAR(1000), IN AuID NVARCHAR(30), IN CatID nvarchar(30))
BEGIN
 SELECT b.id
  , b.boId
  FROM book b
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category bc ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
WHERE CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN 
  ,b.edition, b.volume,  b.callNo,  b.accessionNo,b.uploader
  , (SELECT a.name FROM author a WHERE a.id=ba.authorId) , (SELECT p.name FROM publisher p  WHERE p.id=bp.publisherId)
  , (SELECT S.myanmarName FROM subcategory s WHERE S.id=BS.subcategoryId), (SELECT S.engName FROM subcategory s WHERE S.id=BS.subcategoryId),(SELECT C.myanmarName FROM category c WHERE C.id=BC.categoryId)
  ) LIKE CONCAT('%',ST,'%')
AND ba.authorId=AuID
AND bc.categoryId=CatID;
END
//DELIMITER ;


DELIMITER //
CREATE PROCEDURE `GET_BookId_ByAuthor`(IN ST NVARCHAR(1000), IN AuID NVARCHAR(30), IN CatID nvarchar(30))
BEGIN
 SELECT b.id
  , b.boId
  FROM book b
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category bc ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
WHERE CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN 
  ,b.edition, b.volume,  b.callNo,  b.accessionNo,b.uploader
  , (SELECT a.name FROM author a WHERE a.id=ba.authorId) , (SELECT p.name FROM publisher p  WHERE p.id=bp.publisherId)
  , (SELECT S.myanmarName FROM subcategory s WHERE S.id=BS.subcategoryId), (SELECT S.engName FROM subcategory s WHERE S.id=BS.subcategoryId),(SELECT C.myanmarName FROM category c WHERE C.id=BC.categoryId)
  ) LIKE CONCAT('%',ST,'%')
AND ba.authorId=AuID
AND bc.categoryId=CatID;
END
//DELIMITER ;



call GET_BookId_ByAuthor('a',1,1);

 update history set ratingId=0;
 
  alter table subcategory drop column categoryId varchar(50); 
 alter table subcategory add column categoryBoId varchar(50);
 
 alter table book add column currentPage int;
 update book set currentPage=0;
 
  alter table book add column name varchar(500);
  alter table book add column uploader varchar(500);
  
  
 
 
 CREATE TABLE `constituency` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `boId` varchar(255) NOT NULL,
  `hluttawboId` bigint NOT NULL,
  `code` varchar(20) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `entityStatus` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `hluttawboId` (`hluttawboId`),
  CONSTRAINT `constituency_ibfk_1` FOREIGN KEY (`hluttawboId`) REFERENCES `hluttaw` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

alter table user add column permanentAddress varchar(225);
alter table user add column currentAddress varchar(225);
alter table user add column constituency bigint;




call GET_Recommended_BookId('မြန်မာ့အတွဲ(၅၁)၊','10')






call GET_Popular_BookId('a');
 

CREATE TABLE `advertisement` (
 `id` bigint(20) NOT NULL AUTO_INCREMENT,
 `boId` varchar(255) NOT NULL,
 `name` varchar(100) DEFAULT NULL,
 `pdf` varchar(100) DEFAULT NULL,
 `entityStatus` varchar(100) DEFAULT NULL,
PRIMARY KEY (`id`)
)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

 
alter table advertisement add column type varchar(50);


DELIMITER //
DROP PROCEDURE IF EXISTS GET_PopularBook_byCatIDCreateDt;
CREATE PROCEDURE GET_PopularBook_byCatIDCreateDt (IN CatID nvarchar(50), SDate date,EDate date )
BEGIN
  SELECT
    H.bookId 'Book',
    B.boId,
    H.actionStatus,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
  FROM history H
    , book_category BC
    , book B
  WHERE BC.bookId = H.bookId
  AND B.id=H.bookId
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND BC.categoryId = CatID
  AND  CONVERT(B.createdDate,DATETIME) BETWEEN SDate and EDate
  GROUP BY H.actionStatus,
           BC.categoryId
  ORDER BY TOT_COUNT DESC;
END
//
DELIMITER ;

CALL GET_PopularBook_byCatIDCreateDt('1','2020-06-01','2020-06-24');


USE elibrary;
DELIMITER //
DROP PROCEDURE IF EXISTS GET_PopularBook_bySTandUploader;
CREATE PROCEDURE GET_PopularBook_bySTandUploader (IN ST nvarchar(100), Updr nvarchar(50) )
BEGIN
  SELECT
  H.bookId 'Book',
  B.boId,
--   H.actionStatus,
  B.uploader,
  SUM(CASE WHEN (H.actionStatus = "READ" OR
      H.actionStatus = "FAVOURITE" OR
      H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
FROM history H,    
  book B
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category BC ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
WHERE BC.bookId = H.bookId
AND B.id = H.bookId
AND (H.actionStatus = "READ"
OR H.actionStatus = "FAVOURITE"
OR H.actionStatus = "BOOKMARK")
AND CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN
, b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
, (SELECT
    a.name
  FROM author a
  WHERE a.id = ba.authorId), (SELECT
    p.name
  FROM publisher p
  WHERE p.id = bp.publisherId), (SELECT
    s.myanmarName
  FROM subcategory s
  WHERE s.id = bs.subcategoryId), (SELECT
    s1.engName
  FROM subcategory s1
  WHERE s1.id = bs.subcategoryId), (SELECT
    C.myanmarName
  FROM category c
  WHERE C.id = BC.categoryId), (SELECT
    C.engName
  FROM category c
  WHERE C.id = BC.categoryId)) LIKE CONCAT('%', ST , '%')
  AND B.uploader=Updr
GROUP BY 
         B.boId,
         H.bookId
ORDER BY TOT_COUNT DESC;
END
// DELIMITER ;


CALL GET_PopularBook_bySTandUploader('1', '7');


alter table reply add column viewStatus varchar(50);
update reply set viewStatus=false;


DELIMITER //
DROP PROCEDURE IF EXISTS GET_PopularBook_bySubCatID;
CREATE PROCEDURE GET_PopularBook_bySubCatID (IN SubCatID nvarchar(50))
BEGIN
  SELECT
    BS.bookId,
    H.boId,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'    
  FROM history H,
       book_subcategory BS
  WHERE BS.bookId = H.bookId
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND BS.subcategoryId = SubCatID
  GROUP BY BS.subcategoryId
  ,        BS.bookId
  ORDER BY TOT_COUNT DESC;
END
//
DELIMITER ;

CALL GET_PopularBook_bySubCatID('7');



DELIMITER //
DROP PROCEDURE IF EXISTS GET_PopularBook_byCatIDandSearchTerm;
CREATE PROCEDURE GET_PopularBook_byCatIDandSearchTerm (IN CatID nvarchar(50), ST nvarchar(100))
BEGIN
  SELECT
    H.bookId 'Book',
    H.boId,
    BC.categoryId,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
  FROM  history H,
        book B
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category BC ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
  WHERE BC.bookId = H.bookId
  AND H.bookId=B.id
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND BC.categoryId = CatID
  AND CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN
, b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
, (SELECT
    a.name
  FROM author a
  WHERE a.id = ba.authorId), (SELECT
    p.name
  FROM publisher p
  WHERE p.id = bp.publisherId), (SELECT
    s.myanmarName
  FROM subcategory s
  WHERE s.id = bs.subcategoryId), (SELECT
    s1.engName
  FROM subcategory s1
  WHERE s1.id = bs.subcategoryId), (SELECT
    C.myanmarName
  FROM category c
  WHERE C.id = BC.categoryId), (SELECT
    C.engName
  FROM category c
  WHERE C.id = BC.categoryId)) LIKE CONCAT('%', ST , '%')
  GROUP BY BC.categoryId
    , b.boId
  ORDER BY TOT_COUNT DESC;
END
//
DELIMITER ;


CALL GET_PopularBook_byCatIDandSearchTerm('3','1');

DELIMITER //
DROP PROCEDURE IF EXISTS GET_PopularBook_byCatID;
CREATE PROCEDURE GET_PopularBook_byCatID (IN CatID nvarchar(50))
BEGIN
  SELECT
    H.bookId 'Book',
    H.boId,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
  FROM history H,
       book_category BC
  WHERE BC.bookId = H.bookId
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND BC.categoryId = CatID
  GROUP BY BC.categoryId
  ORDER BY TOT_COUNT DESC;
END
//
DELIMITER ;

-- ------------------------------ --------------------------------- ---------------------------

CALL GET_PopularBook_byCatID('1');


USE elibrary;
DELIMITER//
DROP PROCEDURE IF EXISTS GET_BookCount_Librarian_byCreateDt;
CREATE PROCEDURE GET_BookCount_Librarian_byCreateDt (IN SDate date,EDate date )
BEGIN
  SELECT  
    COUNT(B.id) AS 'BOOK_COUNT',
    B.uploader
  FROM book B
  JOIN user u ON U.id=B.uploader AND U.role='Librarian' 
  AND U.entityStatus='ACTIVE'
  WHERE  CONVERT(B.createdDate,DATETIME) BETWEEN SDate and EDate
  GROUP BY  B.uploader
  ORDER BY BOOK_COUNT DESC; END // DELIMITER;

-- ------------------------------ --------------------------------- ---------------------------

CALL GET_BookCount_Librarian_byCreateDt ('2011-06-01','2020-06-24');


USE elibrary;
DELIMITER//
DROP PROCEDURE IF EXISTS GET_Book_bySTandUploader;
CREATE PROCEDURE GET_Book_bySTandUploader (IN ST nvarchar(100), Updr nvarchar(50) )
BEGIN
  SELECT
  B.id 'ID',
  B.boId 'BOOK',
  B.uploader
FROM 
  book B
  LEFT JOIN book_author ba ON ba.bookId=B.id
  LEFT JOIN book_category BC ON BC.bookId=B.id
  LEFT JOIN book_subcategory bs ON BS.bookId=B.id
  LEFT JOIN book_publisher bp ON bp.bookId=b.id
WHERE  CONCAT_WS(' , ', B.publishedDate, B.title, b.ISBN
, b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
, (SELECT
    a.name
  FROM author a
  WHERE a.id = ba.authorId), (SELECT
    p.name
  FROM publisher p
  WHERE p.id = bp.publisherId), (SELECT
    s.myanmarName
  FROM subcategory s
  WHERE s.id = bs.subcategoryId), (SELECT
    s1.engName
  FROM subcategory s1
  WHERE s1.id = bs.subcategoryId), (SELECT
    C.myanmarName
  FROM category c
  WHERE C.id = BC.categoryId), (SELECT
    C.engName
  FROM category c
  WHERE C.id = BC.categoryId)) LIKE CONCAT('%', ST , '%')
  AND B.uploader=Updr
  GROUP BY B.id
  , B.boId
  ORDER BY B.id DESC; END // DELIMITER;

-- ------------------------------ --------------------------------- ---------------------------

CALL GET_Book_bySTandUploader('1', '7');


alter table advertisement add column linkType varchar(50);





//modify



DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BookId_ByST`(IN ST nvarchar(1000))
BEGIN
 SELECT b.id
  , b.boId
  FROM Book b
  LEFT JOIN Book_Author ba ON ba.bookId=b.id
  LEFT JOIN Book_Category bc ON bc.bookId=b.id
  LEFT JOIN Book_SubCategory bs ON bs.bookId=b.id
  LEFT JOIN Book_Publisher bp ON bp.bookId=b.id
WHERE CONCAT_WS(' , ', b.publishedDate, b.title, b.ISBN 
  ,b.edition, b.volume,  b.callNo,  b.accessionNo,b.uploader
  , (SELECT a.name FROM Author a WHERE a.id=ba.authorId) , (SELECT p.name FROM Publisher p  WHERE p.id=bp.publisherId)
  , (SELECT s.myanmarName FROM SubCategory s WHERE s.id=bs.subcategoryId),  (SELECT s.engName FROM SubCategory s WHERE s.id=bs.subcategoryId),(SELECT c.myanmarName FROM Category c WHERE c.id=bc.categoryId)
  ) LIKE CONCAT('%',ST,'%');
END$$
DELIMITER ;





DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_Recommended_BookId`(IN ST nvarchar(300), UsrID nvarchar(20))
BEGIN
  SELECT
    b.id,
    b.boId
  FROM Book b
    LEFT JOIN Book_Author ba
      ON ba.bookId = B.id
    LEFT JOIN Book_Category bc
      ON bc.bookId = B.id
    LEFT JOIN Book_SubCategory bs
      ON bs.bookId = B.id
    LEFT JOIN Book_Publisher bp
      ON bp.bookId = b.id
    LEFT JOIN History h
      ON h.bookId = b.id
  WHERE CONCAT_WS(' , ', b.publishedDate, b.title, b.ISBN
  , b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
  , (SELECT
      a.name
    FROM Author a
    WHERE a.id = ba.authorId), (SELECT
      p.name
    FROM Publisher p
    WHERE p.id = bp.publisherId), (SELECT
      s.myanmarName
    FROM SubCategory s
    WHERE s.id = bs.subcategoryId), (SELECT
      s1.engName
    FROM SubCategory s1
    WHERE s1.id = bs.subcategoryId), (SELECT
      c.myanmarName
    FROM Category c
    WHERE c.id = bc.categoryId), (SELECT
      c.engName
    FROM Category c
    WHERE c.id = bc.categoryId)) LIKE CONCAT('%', ST, '%')
  AND (h.actionStatus = 'READ'
  OR h.actionStatus = 'FAVOURITE')
  AND H.userId = UsrID
  GROUP BY b.id,
           b.boId
  ORDER BY COUNT(B.boId) DESC;
END$$
DELIMITER ;






DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_Popular_BookId`(IN ST nvarchar(300))
BEGIN
  SELECT
    b.id,
    b.boId
  FROM Book b
    LEFT JOIN Book_Author ba
      ON ba.bookId = b.id
    LEFT JOIN Book_Category bc
      ON bc.bookId = b.id
    LEFT JOIN Book_SubCategory bs
      ON bs.bookId = b.id
    LEFT JOIN Book_Publisher bp
      ON bp.bookId = b.id
    LEFT JOIN History h
      ON h.bookId = b.id
  WHERE CONCAT_WS(' , ', b.publishedDate, b.title, b.ISBN
  , b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
  , (SELECT
      a.name
    FROM Author a
    WHERE a.id = ba.authorId), (SELECT
      p.name
    FROM Publisher p
    WHERE p.id = bp.publisherId), (SELECT
      s.myanmarName
    FROM SubCategory s
    WHERE s.id = bs.subcategoryId), (SELECT
      s1.engName
    FROM SubCategory s1
    WHERE s1.id = bs.subcategoryId), (SELECT
      c.myanmarName
    FROM Category c
    WHERE c.id = bc.categoryId), (SELECT
      c.engName
    FROM Category c
    WHERE c.id = bc.categoryId)) LIKE CONCAT('%', ST, '%')
  AND h.actionStatus = 'READ'
  GROUP BY b.id,
           b.boId
  ORDER BY COUNT(B.boId) DESC;
END$$
DELIMITER ;




DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_BookId_fromHistory`(IN ST nvarchar(300), UsrID varchar(20), ActSt varchar(40))
BEGIN
 SELECT b.id , b.boId -- , b.title -- , h.actionStatus -- , h.userId
  FROM Book b
  LEFT JOIN Book_Author ba ON ba.bookId=B.id
  LEFT JOIN Book_Category bc ON bc.bookId=B.id
  LEFT JOIN Book_Subcategory bs ON bs.bookId=B.id
  LEFT JOIN Book_Publisher bp ON bp.bookId=b.id
  LEFT JOIN History h ON h.bookId=b.id
WHERE CONCAT_WS(' , ', b.publishedDate, b.title, b.ISBN 
,b.edition, b.volume,  b.callNo,  b.accessionNo,b.uploader
, (SELECT a.name FROM Author a WHERE a.id=ba.authorId) 
, (SELECT p.name FROM Publisher p  WHERE p.id=bp.publisherId)
, (SELECT s.myanmarName FROM SubCategory s WHERE s.id=bs.subcategoryId)
, (SELECT s.myanmarName FROM SubCategory s WHERE s.id=bs.subcategoryId)
, (SELECT c.engName FROM Category c WHERE c.id=bc.categoryId)
, (SELECT c.engName FROM Category c WHERE c.id=bc.categoryId)) LIKE CONCAT('%',ST,'%')
AND h.userId=UsrID
AND h.actionStatus=ActSt
;
END$$
DELIMITER ;





USE elibrary;
DELIMITER//
DROP PROCEDURE IF EXISTS GET_BookCount_Librarian_byCreateDt;
CREATE PROCEDURE GET_BookCount_Librarian_byCreateDt (IN SDate date,EDate date )
BEGIN
  SELECT  
    COUNT(B.id) AS 'BOOK_COUNT'
  ,  B.uploader
  FROM Book B
  JOIN User u ON U.id=B.uploader AND u.role='Librarian' 
  AND u.entityStatus='ACTIVE'
  WHERE  CONVERT(B.createdDate,DATETIME) BETWEEN SDate and EDate
  GROUP BY  B.uploader
  ORDER BY BOOK_COUNT DESC;
END
//
DELIMITER;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_PopularBook_byCatID`(IN CatID nvarchar(50))
BEGIN
  SELECT
    BS.bookId 'Book',
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'    
  FROM History H,
       Book_Category BS
  WHERE BS.bookId = H.bookId
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND BS.categoryId = CatID
  GROUP BY BS.categoryId
  ,        BS.bookId
  ORDER BY TOT_COUNT DESC;
END$$
DELIMITER ;

use elibrary;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_Book_bySTandUploader`(IN ST nvarchar(100), Updr nvarchar(50) )
BEGIN
  SELECT
  B.id 'ID',
  B.boId 'BOOK',
  B.uploader
FROM 
  Book B
  LEFT JOIN Book_Author ba ON ba.bookId=B.id
  LEFT JOIN Book_Category bc ON bc.bookId=B.id
  LEFT JOIN Book_SubCategory bs ON bs.bookId=B.id
  LEFT JOIN Book_Publisher bp ON bp.bookId=B.id
WHERE  CONCAT_WS(' , ', B.publishedDate, B.title, B.ISBN
, B.edition, B.volume, B.callNo, B.accessionNo, B.uploader
, (SELECT
    a.name
  FROM Author a
  WHERE a.id = ba.authorId), (SELECT
    p.name
  FROM Publisher p
  WHERE p.id = bp.publisherId), (SELECT
    s.myanmarName
  FROM SubCategory s
  WHERE s.id = bs.subcategoryId), (SELECT
    s1.engName
  FROM SubCategory s1
  WHERE s1.id = bs.subcategoryId), (SELECT
    c.myanmarName
  FROM Category c
  WHERE c.id = bc.categoryId), (SELECT
    c.engName
  FROM Category c
  WHERE c.id = bc.categoryId)) LIKE CONCAT('%', ST , '%')
  AND B.uploader=Updr
  GROUP BY B.id
  , B.boId
  ORDER BY B.id DESC; 
  END$$
DELIMITER ;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_PopularBook_byCatIDandSearchTerm`(IN CatID nvarchar(50), ST nvarchar(100))
BEGIN
  SELECT
	b.id 'Book',
    H.boId,
    bc.categoryId,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
  FROM  History H,
        Book b
  LEFT JOIN Book_Author ba ON ba.bookId=b.id
  LEFT JOIN Book_Category bc ON bc.bookId=b.id
  LEFT JOIN Book_SubCategory bs ON bs.bookId=b.id
  LEFT JOIN Book_Publisher bp ON bp.bookId=b.id
  WHERE bc.bookId = H.bookId
  AND H.bookId=b.id
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND bc.categoryId = CatID
  AND CONCAT_WS(' , ', b.publishedDate, b.title, b.ISBN
, b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
, (SELECT
    a.name
  FROM Author a
  WHERE a.id = ba.authorId), (SELECT
    p.name
  FROM Publisher p
  WHERE p.id = bp.publisherId), (SELECT
    s.myanmarName
  FROM SubCategory s
  WHERE s.id = bs.subcategoryId), (SELECT
    s1.engName
  FROM SubCategory s1
  WHERE s1.id = bs.subcategoryId), (SELECT
    c.myanmarName
  FROM Category c
  WHERE c.id = bc.categoryId), (SELECT
    c.engName
  FROM Category c
  WHERE c.id = bc.categoryId)) LIKE CONCAT('%', ST , '%')
  GROUP BY bc.categoryId
    , b.boId
  ORDER BY TOT_COUNT DESC;
END$$
DELIMITER ;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_PopularBook_bySubCatIDandSearchTerm`(IN SubCatID nvarchar(50), ST nvarchar(100))
BEGIN
  SELECT
    b.id 'Book',
    H.bookId,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
  FROM  History H,
        Book b
  LEFT JOIN Book_Author ba ON ba.bookId=b.id
  LEFT JOIN Book_Category bc ON bc.bookId=b.id
  LEFT JOIN Book_SubCategory bs ON bs.bookId=b.id
  LEFT JOIN Book_Publisher bp ON bp.bookId=b.id
  WHERE bc.bookId = H.bookId
  AND H.bookId=b.id
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND bs.subcategoryId = SubCatID
  AND CONCAT_WS(' , ', b.publishedDate, b.title, b.ISBN
, b.edition, b.volume, b.callNo, b.accessionNo, b.uploader
, (SELECT
    a.name
  FROM Author a
  WHERE a.id = ba.authorId), (SELECT
    p.name
  FROM Publisher p
  WHERE p.id = bp.publisherId), (SELECT
    s.myanmarName
  FROM SubCategory s
  WHERE s.id = bs.subcategoryId), (SELECT
    s1.engName
  FROM SubCategory s1
  WHERE s1.id = bs.subcategoryId), (SELECT
    c.myanmarName
  FROM Category c
  WHERE c.id = bc.categoryId), (SELECT
    c.engName
  FROM Category c
  WHERE c.id = bc.categoryId)) LIKE CONCAT('%', ST , '%')
  GROUP BY bs.subcategoryId
    , b.boId
  ORDER BY TOT_COUNT DESC;
END$$
DELIMITER ;



DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GET_PopularBook_bySubCatIDCreateDt`(IN SubCatID nvarchar(50), SDate date,EDate date )
BEGIN
  SELECT
    B.boId,
    BS.bookId,
    SUM(CASE WHEN (H.actionStatus = "READ" OR
        H.actionStatus = "FAVOURITE" OR
        H.actionStatus = "BOOKMARK") THEN 1 ELSE 0 END) AS 'TOT_COUNT'
  FROM History H
    , Book_SubCategory BS
    , Book B
  WHERE BS.bookId = H.bookId
  AND B.id=H.bookId
  AND (H.actionStatus = "READ"
  OR H.actionStatus = "FAVOURITE"
  OR H.actionStatus = "BOOKMARK")
  AND BS.subcategoryId = SubCatID
  AND  CONVERT(B.createdDate,DATETIME) BETWEEN SDate and EDate
  GROUP BY  BS.bookId,
            BS.subcategoryId
  ORDER BY TOT_COUNT DESC;
END$$
DELIMITER ;











